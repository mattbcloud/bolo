// Generated by CoffeeScript 1.12.7
(function() {
  var EventEmitter, WorldObject,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require('events').EventEmitter;

  WorldObject = (function(superClass) {
    extend(WorldObject, superClass);

    WorldObject.prototype.world = null;

    WorldObject.prototype.idx = null;

    WorldObject.prototype.updatePriority = 0;

    function WorldObject(world) {
      this.world = world;
    }

    WorldObject.prototype.spawn = function() {};

    WorldObject.prototype.update = function() {};

    WorldObject.prototype.destroy = function() {};

    WorldObject.prototype.ref = function(attribute, other) {
      var r, ref, ref1;
      if (((ref = this[attribute]) != null ? ref.$ : void 0) === other) {
        return this[attribute];
      }
      if ((ref1 = this[attribute]) != null) {
        ref1.clear();
      }
      if (!other) {
        return;
      }
      this[attribute] = r = {
        $: other,
        owner: this,
        attribute: attribute
      };
      r.events = {};
      r.on = function(event, listener) {
        var base;
        other.on(event, listener);
        ((base = r.events)[event] || (base[event] = [])).push(listener);
        return r;
      };
      r.clear = function() {
        var event, i, len, listener, listeners, ref2;
        ref2 = r.events;
        for (event in ref2) {
          listeners = ref2[event];
          for (i = 0, len = listeners.length; i < len; i++) {
            listener = listeners[i];
            other.removeListener(event, listener);
          }
        }
        r.owner.removeListener('finalize', r.clear);
        return r.owner[r.attribute] = null;
      };
      r.on('finalize', r.clear);
      r.owner.on('finalize', r.clear);
      return r;
    };

    return WorldObject;

  })(EventEmitter);

  module.exports = WorldObject;

}).call(this);
