// Generated by CoffeeScript 1.12.7
(function() {
  (function() {
    var actualCAF, actualRAF, i, len, prefix, ref;
    if (typeof window !== "undefined" && window !== null) {
      if (actualRAF = window.requestAnimationFrame) {
        actualCAF = window.cancelAnimationFrame || window.cancelRequestAnimationFrame;
      } else {
        ref = ['moz', 'webkit', 'ms', 'o'];
        for (i = 0, len = ref.length; i < len; i++) {
          prefix = ref[i];
          if (actualRAF = window[prefix + "RequestAnimationFrame"]) {
            actualCAF = window[prefix + "CancelAnimationFrame"] || window[prefix + "CancelRequestAnimationFrame"];
            break;
          }
        }
      }
      if (actualRAF) {
        actualRAF = actualRAF.bind(window);
        if (actualCAF) {
          actualCAF = actualCAF.bind(window);
        }
      }
      if (!actualRAF) {
        actualRAF = function(callback) {
          callback();
          return null;
        };
        actualCAF = function(timeout) {
          return null;
        };
      }
    } else {
      actualRAF = process.nextTick;
      actualCAF = null;
    }
    if (!actualCAF) {
      exports.requestAnimationFrame = function(callback) {
        var state;
        state = {
          active: true
        };
        actualRAF(function() {
          if (state.active) {
            return callback();
          }
        });
        return state;
      };
      return exports.cancelAnimationFrame = function(state) {
        return state.active = false;
      };
    } else {
      exports.requestAnimationFrame = actualRAF;
      return exports.cancelAnimationFrame = actualCAF;
    }
  })();

  exports.createLoop = function(options) {
    var frameCallback, frameReq, handle, lastTick, timerCallback, timerReq;
    if (options == null) {
      options = {};
    }
    lastTick = timerReq = frameReq = null;
    timerCallback = function() {
      var now;
      timerReq = null;
      now = Date.now();
      while (now - lastTick >= options.rate) {
        options.tick();
        lastTick += options.rate;
      }
      if (typeof options.idle === "function") {
        options.idle();
      }
      if (options.frame && !frameReq) {
        frameReq = exports.requestAnimationFrame(frameCallback);
      }
      return timerReq = setTimeout(timerCallback, options.rate);
    };
    frameCallback = function() {
      frameReq = null;
      return options.frame();
    };
    handle = {
      start: function() {
        if (!timerReq) {
          lastTick = Date.now();
          return timerReq = setTimeout(timerCallback, options.rate);
        }
      },
      stop: function() {
        if (timerReq) {
          clearInterval(timerReq);
          timerReq = null;
        }
        if (frameReq) {
          exports.cancelAnimationFrame(frameReq);
          return frameReq = null;
        }
      }
    };
    return handle;
  };

}).call(this);
