// Generated by CoffeeScript 1.12.7
(function() {
  var BoloObject, FloodFill,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BoloObject = require('../object');

  FloodFill = (function(superClass) {
    extend(FloodFill, superClass);

    function FloodFill() {
      return FloodFill.__super__.constructor.apply(this, arguments);
    }

    FloodFill.prototype.styled = null;

    FloodFill.prototype.serialization = function(isCreate, p) {
      if (isCreate) {
        p('H', 'x');
        p('H', 'y');
      }
      return p('B', 'lifespan');
    };

    FloodFill.prototype.spawn = function(cell) {
      var ref;
      ref = cell.getWorldCoordinates(), this.x = ref[0], this.y = ref[1];
      return this.lifespan = 16;
    };

    FloodFill.prototype.anySpawn = function() {
      this.cell = this.world.map.cellAtWorld(this.x, this.y);
      return this.neighbours = [this.cell.neigh(1, 0), this.cell.neigh(0, 1), this.cell.neigh(-1, 0), this.cell.neigh(0, -1)];
    };

    FloodFill.prototype.update = function() {
      if (this.lifespan-- === 0) {
        this.flood();
        return this.world.destroy(this);
      }
    };

    FloodFill.prototype.canGetWet = function() {
      var i, len, n, ref, result;
      result = false;
      ref = this.neighbours;
      for (i = 0, len = ref.length; i < len; i++) {
        n = ref[i];
        if (!(n.base || n.pill) && n.isType(' ', '^', 'b')) {
          result = true;
          break;
        }
      }
      return result;
    };

    FloodFill.prototype.flood = function() {
      if (this.canGetWet()) {
        this.cell.setType(' ', false);
        return this.spread();
      }
    };

    FloodFill.prototype.spread = function() {
      var i, len, n, ref;
      ref = this.neighbours;
      for (i = 0, len = ref.length; i < len; i++) {
        n = ref[i];
        if (!(n.base || n.pill) && n.isType('%')) {
          this.world.spawn(FloodFill, n);
        }
      }
    };

    return FloodFill;

  })(BoloObject);

  module.exports = FloodFill;

}).call(this);
