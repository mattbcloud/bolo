// Generated by CoffeeScript 1.12.7
(function() {
  var BoloObject, TILE_SIZE_WORLD, WorldBase, distance, max, min, sounds,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  min = Math.min, max = Math.max;

  TILE_SIZE_WORLD = require('../constants').TILE_SIZE_WORLD;

  distance = require('../helpers').distance;

  BoloObject = require('../object');

  sounds = require('../sounds');

  WorldBase = (function(superClass) {
    extend(WorldBase, superClass);

    function WorldBase(world_or_map, x, y, owner_idx, armour, shells, mines) {
      this.owner_idx = owner_idx;
      this.armour = armour;
      this.shells = shells;
      this.mines = mines;
      if (arguments.length === 1) {
        this.world = world_or_map;
      } else {
        this.x = (x + 0.5) * TILE_SIZE_WORLD;
        this.y = (y + 0.5) * TILE_SIZE_WORLD;
        world_or_map.cellAtTile(x, y).setType('=', false, -1);
      }
      this.on('netUpdate', (function(_this) {
        return function(changes) {
          if (changes.hasOwnProperty('owner')) {
            return _this.updateOwner();
          }
        };
      })(this));
    }

    WorldBase.prototype.serialization = function(isCreate, p) {
      if (isCreate) {
        p('H', 'x');
        p('H', 'y');
      }
      p('O', 'owner');
      p('O', 'refueling');
      if (this.refueling) {
        p('B', 'refuelCounter');
      }
      p('B', 'armour');
      p('B', 'shells');
      return p('B', 'mines');
    };

    WorldBase.prototype.updateOwner = function() {
      if (this.owner) {
        this.owner_idx = this.owner.$.tank_idx;
        this.team = this.owner.$.team;
      } else {
        this.owner_idx = this.team = 255;
      }
      return this.cell.retile();
    };

    WorldBase.prototype.anySpawn = function() {
      this.cell = this.world.map.cellAtWorld(this.x, this.y);
      return this.cell.base = this;
    };

    WorldBase.prototype.update = function() {
      var amount;
      if (this.refueling && (this.refueling.$.cell !== this.cell || this.refueling.$.armour === 255)) {
        this.ref('refueling', null);
      }
      if (!this.refueling) {
        return this.findSubject();
      }
      if (--this.refuelCounter !== 0) {
        return;
      }
      if (this.armour > 0 && this.refueling.$.armour < 40) {
        amount = min(5, this.armour, 40 - this.refueling.$.armour);
        this.refueling.$.armour += amount;
        this.armour -= amount;
        return this.refuelCounter = 46;
      } else if (this.shells > 0 && this.refueling.$.shells < 40) {
        this.refueling.$.shells += 1;
        this.shells -= 1;
        return this.refuelCounter = 7;
      } else if (this.mines > 0 && this.refueling.$.mines < 40) {
        this.refueling.$.mines += 1;
        this.mines -= 1;
        return this.refuelCounter = 7;
      } else {
        return this.refuelCounter = 1;
      }
    };

    WorldBase.prototype.findSubject = function() {
      var canClaim, i, j, len, len1, other, ref, tank, tanks;
      tanks = (function() {
        var i, len, ref, results;
        ref = this.world.tanks;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          tank = ref[i];
          if (tank.armour !== 255 && tank.cell === this.cell) {
            results.push(tank);
          }
        }
        return results;
      }).call(this);
      for (i = 0, len = tanks.length; i < len; i++) {
        tank = tanks[i];
        if ((ref = this.owner) != null ? ref.$.isAlly(tank) : void 0) {
          this.ref('refueling', tank);
          this.refuelCounter = 46;
          break;
        } else {
          canClaim = true;
          for (j = 0, len1 = tanks.length; j < len1; j++) {
            other = tanks[j];
            if (other !== tank) {
              if (!tank.isAlly(other)) {
                canClaim = false;
              }
            }
          }
          if (canClaim) {
            this.ref('owner', tank);
            this.updateOwner();
            this.owner.on('destroy', (function(_this) {
              return function() {
                _this.ref('owner', null);
                return _this.updateOwner();
              };
            })(this));
            this.ref('refueling', tank);
            this.refuelCounter = 46;
            break;
          }
        }
      }
    };

    WorldBase.prototype.takeShellHit = function(shell) {
      var i, len, pill, ref, ref1;
      if (this.owner) {
        ref = this.world.map.pills;
        for (i = 0, len = ref.length; i < len; i++) {
          pill = ref[i];
          if (!(pill.inTank || pill.carried) && pill.armour > 0) {
            if (((ref1 = pill.owner) != null ? ref1.$.isAlly(this.owner.$) : void 0) && distance(this, pill) <= 2304) {
              pill.aggravate();
            }
          }
        }
      }
      this.armour = max(0, this.armour - 5);
      return sounds.SHOT_BUILDING;
    };

    return WorldBase;

  })(BoloObject);

  module.exports = WorldBase;

}).call(this);
