// Generated by CoffeeScript 1.12.7
(function() {
  var CachedSegment, Common2dRenderer, MAP_SIZE_SEGMENTS, MAP_SIZE_TILES, Offscreen2dRenderer, SEGMENT_SIZE_PIXEL, SEGMENT_SIZE_TILES, TILE_SIZE_PIXELS, floor, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  floor = Math.floor;

  ref = require('../../constants'), TILE_SIZE_PIXELS = ref.TILE_SIZE_PIXELS, MAP_SIZE_TILES = ref.MAP_SIZE_TILES;

  Common2dRenderer = require('./common_2d');

  SEGMENT_SIZE_TILES = 16;

  MAP_SIZE_SEGMENTS = MAP_SIZE_TILES / SEGMENT_SIZE_TILES;

  SEGMENT_SIZE_PIXEL = SEGMENT_SIZE_TILES * TILE_SIZE_PIXELS;

  CachedSegment = (function() {
    function CachedSegment(renderer, x, y) {
      this.renderer = renderer;
      this.sx = x * SEGMENT_SIZE_TILES;
      this.sy = y * SEGMENT_SIZE_TILES;
      this.ex = this.sx + SEGMENT_SIZE_TILES - 1;
      this.ey = this.sy + SEGMENT_SIZE_TILES - 1;
      this.psx = x * SEGMENT_SIZE_PIXEL;
      this.psy = y * SEGMENT_SIZE_PIXEL;
      this.pex = this.psx + SEGMENT_SIZE_PIXEL - 1;
      this.pey = this.psy + SEGMENT_SIZE_PIXEL - 1;
      this.canvas = null;
    }

    CachedSegment.prototype.isInView = function(sx, sy, ex, ey) {
      if (ex < this.psx || ey < this.psy) {
        return false;
      } else if (sx > this.pex || sy > this.pey) {
        return false;
      } else {
        return true;
      }
    };

    CachedSegment.prototype.build = function() {
      this.canvas = $('<canvas/>')[0];
      this.canvas.width = this.canvas.height = SEGMENT_SIZE_PIXEL;
      this.ctx = this.canvas.getContext('2d');
      this.ctx.translate(-this.psx, -this.psy);
      return this.renderer.world.map.each((function(_this) {
        return function(cell) {
          return _this.onRetile(cell, cell.tile[0], cell.tile[1]);
        };
      })(this), this.sx, this.sy, this.ex, this.ey);
    };

    CachedSegment.prototype.clear = function() {
      return this.canvas = this.ctx = null;
    };

    CachedSegment.prototype.onRetile = function(cell, tx, ty) {
      var obj, ref1;
      if (!this.canvas) {
        return;
      }
      if (obj = cell.pill || cell.base) {
        return this.renderer.drawStyledTile(cell.tile[0], cell.tile[1], (ref1 = obj.owner) != null ? ref1.$.team : void 0, cell.x * TILE_SIZE_PIXELS, cell.y * TILE_SIZE_PIXELS, this.ctx);
      } else {
        return this.renderer.drawTile(cell.tile[0], cell.tile[1], cell.x * TILE_SIZE_PIXELS, cell.y * TILE_SIZE_PIXELS, this.ctx);
      }
    };

    return CachedSegment;

  })();

  Offscreen2dRenderer = (function(superClass) {
    extend(Offscreen2dRenderer, superClass);

    function Offscreen2dRenderer() {
      return Offscreen2dRenderer.__super__.constructor.apply(this, arguments);
    }

    Offscreen2dRenderer.prototype.setup = function() {
      var i, ref1, results, row, x, y;
      Offscreen2dRenderer.__super__.setup.apply(this, arguments);
      this.cache = new Array(MAP_SIZE_SEGMENTS);
      results = [];
      for (y = i = 0, ref1 = MAP_SIZE_SEGMENTS; 0 <= ref1 ? i < ref1 : i > ref1; y = 0 <= ref1 ? ++i : --i) {
        row = this.cache[y] = new Array(MAP_SIZE_SEGMENTS);
        results.push((function() {
          var j, ref2, results1;
          results1 = [];
          for (x = j = 0, ref2 = MAP_SIZE_SEGMENTS; 0 <= ref2 ? j < ref2 : j > ref2; x = 0 <= ref2 ? ++j : --j) {
            results1.push(row[x] = new CachedSegment(this, x, y));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Offscreen2dRenderer.prototype.onRetile = function(cell, tx, ty) {
      var segx, segy;
      cell.tile = [tx, ty];
      segx = floor(cell.x / SEGMENT_SIZE_TILES);
      segy = floor(cell.y / SEGMENT_SIZE_TILES);
      return this.cache[segy][segx].onRetile(cell, tx, ty);
    };

    Offscreen2dRenderer.prototype.drawMap = function(sx, sy, w, h) {
      var alreadyBuiltOne, ex, ey, i, j, len, len1, ref1, row, segment;
      ex = sx + w - 1;
      ey = sy + h - 1;
      alreadyBuiltOne = false;
      ref1 = this.cache;
      for (i = 0, len = ref1.length; i < len; i++) {
        row = ref1[i];
        for (j = 0, len1 = row.length; j < len1; j++) {
          segment = row[j];
          if (!segment.isInView(sx, sy, ex, ey)) {
            if (segment.canvas) {
              segment.clear();
            }
            continue;
          }
          if (!segment.canvas) {
            if (alreadyBuiltOne) {
              continue;
            }
            segment.build();
            alreadyBuiltOne = true;
          }
          this.ctx.drawImage(segment.canvas, 0, 0, SEGMENT_SIZE_PIXEL, SEGMENT_SIZE_PIXEL, segment.psx, segment.psy, SEGMENT_SIZE_PIXEL, SEGMENT_SIZE_PIXEL);
        }
      }
    };

    return Offscreen2dRenderer;

  })(Common2dRenderer);

  module.exports = Offscreen2dRenderer;

}).call(this);
