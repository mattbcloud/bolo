// Generated by CoffeeScript 1.12.7
(function() {
  var Application, BoloServerWorld, BoloWorldMixin, MapIndex, ServerWorld, TICK_LENGTH_MS, Tank, WebSocket, WorldMap, allObjects, connect, createBoloApp, createLoop, fs, helpers, net, pack, path, random, redirector, round, url,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  random = Math.random, round = Math.round;

  fs = require('fs');

  url = require('url');

  path = require('path');

  connect = require('connect');

  createLoop = require('villain/loop').createLoop;

  ServerWorld = require('villain/world/net/server');

  pack = require('villain/struct').pack;

  WebSocket = require('faye-websocket');

  MapIndex = require('./map_index');

  helpers = require('../helpers');

  BoloWorldMixin = require('../world_mixin');

  allObjects = require('../objects/all');

  Tank = require('../objects/tank');

  WorldMap = require('../world_map');

  net = require('../net');

  TICK_LENGTH_MS = require('../constants').TICK_LENGTH_MS;

  BoloServerWorld = (function(superClass) {
    extend(BoloServerWorld, superClass);

    BoloServerWorld.prototype.authority = true;

    function BoloServerWorld(map1) {
      this.map = map1;
      BoloServerWorld.__super__.constructor.apply(this, arguments);
      this.boloInit();
      this.clients = [];
      this.map.world = this;
      this.oddTick = false;
      this.spawnMapObjects();
    }

    BoloServerWorld.prototype.close = function() {
      var client, j, len, ref, results;
      ref = this.clients;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        client = ref[j];
        results.push(client.end());
      }
      return results;
    };

    BoloServerWorld.prototype.tick = function() {
      BoloServerWorld.__super__.tick.apply(this, arguments);
      return this.sendPackets();
    };

    BoloServerWorld.prototype.soundEffect = function(sfx, x, y, owner) {
      var ownerIdx;
      ownerIdx = owner != null ? owner.idx : 65535;
      return this.changes.push(['soundEffect', sfx, x, y, ownerIdx]);
    };

    BoloServerWorld.prototype.mapChanged = function(cell, oldType, hadMine, oldLife) {
      var ascii;
      ascii = cell.type.ascii;
      return this.changes.push(['mapChange', cell.x, cell.y, ascii, cell.life, cell.mine]);
    };

    BoloServerWorld.prototype.onConnect = function(ws) {
      var j, len, messages, obj, packet, ref, tank;
      this.clients.push(ws);
      ws.heartbeatTimer = 0;
      ws.onmessage = (function(_this) {
        return function(e) {
          return _this.onMessage(ws, e.data);
        };
      })(this);
      ws.onclose = (function(_this) {
        return function(e) {
          return _this.onEnd(ws, e.code, e.reason);
        };
      })(this);
      packet = this.map.dump({
        noPills: true,
        noBases: true
      });
      packet = new Buffer(packet).toString('base64');
      ws.send(packet);
      packet = [];
      ref = this.objects;
      for (j = 0, len = ref.length; j < len; j++) {
        obj = ref[j];
        packet = packet.concat([net.CREATE_MESSAGE, obj._net_type_idx]);
      }
      packet = packet.concat([net.UPDATE_MESSAGE], this.dumpTick(true));
      packet = new Buffer(packet).toString('base64');
      ws.send(packet);
      messages = (function() {
        var k, len1, ref1, results;
        ref1 = this.tanks;
        results = [];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          tank = ref1[k];
          results.push({
            command: 'nick',
            idx: tank.idx,
            nick: tank.name
          });
        }
        return results;
      }).call(this);
      messages = JSON.stringify(messages);
      ws.send(messages);
      packet = new Buffer([net.SYNC_MESSAGE]).toString('base64');
      return ws.send(packet);
    };

    BoloServerWorld.prototype.onEnd = function(ws, code, reason) {
      var idx;
      if (ws.tank) {
        this.destroy(ws.tank);
      }
      ws.tank = null;
      if ((idx = this.clients.indexOf(ws)) !== -1) {
        this.clients.splice(idx, 1);
      }
      return ws.close();
    };

    BoloServerWorld.prototype.onMessage = function(ws, message) {
      if (message === '') {
        return ws.heartbeatTimer = 0;
      } else if (message.charAt(0) === '{') {
        return this.onJsonMessage(ws, message);
      } else {
        return this.onSimpleMessage(ws, message);
      }
    };

    BoloServerWorld.prototype.onSimpleMessage = function(ws, message) {
      var action, builder, command, ref, sanitized, tank, trees, x, y;
      if (!(tank = ws.tank)) {
        return this.onError(ws, new Error("Received a game command from a spectator"));
      }
      command = message.charAt(0);
      switch (command) {
        case net.START_TURNING_CCW:
          return tank.turningCounterClockwise = true;
        case net.STOP_TURNING_CCW:
          return tank.turningCounterClockwise = false;
        case net.START_TURNING_CW:
          return tank.turningClockwise = true;
        case net.STOP_TURNING_CW:
          return tank.turningClockwise = false;
        case net.START_ACCELERATING:
          return tank.accelerating = true;
        case net.STOP_ACCELERATING:
          return tank.accelerating = false;
        case net.START_BRAKING:
          return tank.braking = true;
        case net.STOP_BRAKING:
          return tank.braking = false;
        case net.START_SHOOTING:
          return tank.shooting = true;
        case net.STOP_SHOOTING:
          return tank.shooting = false;
        case net.INC_RANGE:
          return tank.increaseRange();
        case net.DEC_RANGE:
          return tank.decreaseRange();
        case net.BUILD_ORDER:
          ref = message.slice(2).split(','), action = ref[0], trees = ref[1], x = ref[2], y = ref[3];
          trees = parseInt(trees);
          x = parseInt(x);
          y = parseInt(y);
          builder = tank.builder.$;
          if (trees < 0 || !builder.states.actions.hasOwnProperty(action)) {
            return this.onError(ws, new Error("Received invalid build order"));
          } else {
            return builder.performOrder(action, trees, this.map.cellAtTile(x, y));
          }
          break;
        default:
          sanitized = command.replace(/\W+/, '');
          return this.onError(ws, new Error("Received an unknown command: " + sanitized));
      }
    };

    BoloServerWorld.prototype.onJsonMessage = function(ws, message) {
      var e, sanitized, tank;
      try {
        message = JSON.parse(message);
        if (typeof message.command !== 'string') {
          throw new Error("Received an invalid JSON message");
        }
      } catch (error) {
        e = error;
        return this.onError(ws, e);
      }
      if (message.command === 'join') {
        if (ws.tank) {
          this.onError(ws, new Error("Client tried to join twice."));
        } else {
          this.onJoinMessage(ws, message);
        }
        return;
      }
      if (!(tank = ws.tank)) {
        return this.onError(ws, new Error("Received a JSON message from a spectator"));
      }
      switch (message.command) {
        case 'msg':
          return this.onTextMessage(ws, tank, message);
        case 'teamMsg':
          return this.onTeamTextMessage(ws, tank, message);
        default:
          sanitized = message.command.slice(0, 10).replace(/\W+/, '');
          return this.onError(ws, new Error("Received an unknown JSON command: " + sanitized));
      }
    };

    BoloServerWorld.prototype.onJoinMessage = function(ws, message) {
      var packet;
      if (typeof message.nick !== 'string' || message.nick.length > 20) {
        this.onError(ws, new Error("Client specified invalid nickname."));
      }
      if (typeof message.team !== 'number' || !(message.team === 0 || message.team === 1)) {
        this.onError(ws, new Error("Client specified invalid team."));
      }
      ws.tank = this.spawn(Tank, message.team);
      packet = this.changesPacket(true);
      packet = new Buffer(packet).toString('base64');
      this.broadcast(packet);
      ws.tank.name = message.name;
      this.broadcast(JSON.stringify({
        command: 'nick',
        idx: ws.tank.idx,
        nick: message.nick
      }));
      packet = pack('BH', net.WELCOME_MESSAGE, ws.tank.idx);
      packet = new Buffer(packet).toString('base64');
      return ws.send(packet);
    };

    BoloServerWorld.prototype.onTextMessage = function(ws, tank, message) {
      if (typeof message.text !== 'string' || message.text.length > 140) {
        this.onError(ws, new Error("Client sent an invalid text message."));
      }
      return this.broadcast(JSON.stringify({
        command: 'msg',
        idx: tank.idx,
        text: message.text
      }));
    };

    BoloServerWorld.prototype.onTeamTextMessage = function(ws, tank, message) {
      var client, j, len, out, ref, results;
      if (typeof message.text !== 'string' || message.text.length > 140) {
        this.onError(ws, new Error("Client sent an invalid text message."));
      }
      if (tank.team === 255) {
        return;
      }
      out = JSON.stringify({
        command: 'teamMsg',
        idx: tank.idx,
        text: message.text
      });
      ref = this.clients;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        client = ref[j];
        if (client.tank.team === tank.team) {
          results.push(client.send(out));
        }
      }
      return results;
    };

    BoloServerWorld.prototype.broadcast = function(message) {
      var client, j, len, ref, results;
      ref = this.clients;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        client = ref[j];
        results.push(client.send(message));
      }
      return results;
    };

    BoloServerWorld.prototype.sendPackets = function() {
      var client, j, largePacket, len, ref, results, smallPacket;
      if (this.oddTick = !this.oddTick) {
        smallPacket = this.changesPacket(true);
        smallPacket = new Buffer(smallPacket).toString('base64');
        largePacket = smallPacket;
      } else {
        smallPacket = this.changesPacket(false);
        largePacket = smallPacket.concat(this.updatePacket());
        smallPacket = new Buffer(smallPacket).toString('base64');
        largePacket = new Buffer(largePacket).toString('base64');
      }
      ref = this.clients;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        client = ref[j];
        if (client.heartbeatTimer > 40) {
          results.push(client.send(smallPacket));
        } else {
          client.send(largePacket);
          results.push(client.heartbeatTimer++);
        }
      }
      return results;
    };

    BoloServerWorld.prototype.changesPacket = function(fullCreate) {
      var ascii, asciiCode, change, data, i, idx, j, k, l, len, len1, len2, life, mine, needUpdate, obj, other, ownerIdx, ref, sfx, type, x, y;
      if (!(this.changes.length > 0)) {
        return [];
      }
      data = [];
      needUpdate = [];
      ref = this.changes;
      for (j = 0, len = ref.length; j < len; j++) {
        change = ref[j];
        type = change.shift();
        switch (type) {
          case 'create':
            obj = change[0], idx = change[1];
            if (fullCreate) {
              needUpdate.push(obj);
            }
            data = data.concat([net.CREATE_MESSAGE], pack('B', obj._net_type_idx));
            break;
          case 'destroy':
            obj = change[0], idx = change[1];
            for (i = k = 0, len1 = needUpdate.length; k < len1; i = ++k) {
              other = needUpdate[i];
              if (other === obj) {
                needUpdate.splice(i, 1);
                break;
              }
            }
            data = data.concat([net.DESTROY_MESSAGE], pack('H', idx));
            break;
          case 'mapChange':
            x = change[0], y = change[1], ascii = change[2], life = change[3], mine = change[4];
            asciiCode = ascii.charCodeAt(0);
            data = data.concat([net.MAPCHANGE_MESSAGE], pack('BBBBf', x, y, asciiCode, life, mine));
            break;
          case 'soundEffect':
            sfx = change[0], x = change[1], y = change[2], ownerIdx = change[3];
            data = data.concat([net.SOUNDEFFECT_MESSAGE], pack('BHHH', sfx, x, y, ownerIdx));
        }
      }
      for (l = 0, len2 = needUpdate.length; l < len2; l++) {
        obj = needUpdate[l];
        data = data.concat([net.TINY_UPDATE_MESSAGE], pack('H', obj.idx), this.dump(obj));
      }
      return data;
    };

    BoloServerWorld.prototype.updatePacket = function() {
      return [net.UPDATE_MESSAGE].concat(this.dumpTick());
    };

    return BoloServerWorld;

  })(ServerWorld);

  helpers.extend(BoloServerWorld.prototype, BoloWorldMixin);

  allObjects.registerWithWorld(BoloServerWorld.prototype);

  Application = (function() {
    function Application(options1) {
      var mapPath, webroot;
      this.options = options1 != null ? options1 : {};
      this.tick = bind(this.tick, this);
      webroot = path.join(path.dirname(fs.realpathSync(__filename)), '../../');
      this.connectServer = connect.createServer();
      if (this.options.web.log) {
        this.connectServer.use('/', connect.logger());
      }
      this.connectServer.use('/', redirector(this.options.general.base));
      this.connectServer.use('/', connect["static"](webroot));
      this.games = {};
      this.ircClients = [];
      mapPath = path.join(path.dirname(fs.realpathSync(__filename)), '../../maps');
      this.maps = new MapIndex(mapPath, (function(_this) {
        return function() {
          return _this.resetDemo(function(err) {
            if (err) {
              return console.log(err);
            }
          });
        };
      })(this));
      this.loop = createLoop({
        rate: TICK_LENGTH_MS,
        tick: this.tick
      });
    }

    Application.prototype.resetDemo = function(cb) {
      var everard;
      if (this.demo) {
        this.closeGame(this.demo);
      }
      if (!(everard = this.maps.get('Everard Island'))) {
        return typeof cb === "function" ? cb("Could not find Everard Island.") : void 0;
      }
      return fs.readFile(everard.path, (function(_this) {
        return function(err, data) {
          if (err) {
            return typeof cb === "function" ? cb("Unable to start demo game: " + (err.toString())) : void 0;
          }
          _this.demo = _this.createGame(data);
          return typeof cb === "function" ? cb() : void 0;
        };
      })(this));
    };

    Application.prototype.haveOpenSlots = function() {
      return Object.getOwnPropertyNames(this.games).length < this.options.general.maxgames;
    };

    Application.prototype.createGameId = function() {
      var charset, gid, i;
      charset = 'abcdefghijklmnopqrstuvwxyz';
      while (true) {
        gid = (function() {
          var j, results;
          results = [];
          for (i = j = 1; j <= 20; i = ++j) {
            results.push(charset.charAt(round(random() * (charset.length - 1))));
          }
          return results;
        })();
        gid = gid.join('');
        if (!this.games.hasOwnProperty(gid)) {
          break;
        }
      }
      return gid;
    };

    Application.prototype.createGame = function(mapData) {
      var game, gid, map;
      map = WorldMap.load(mapData);
      gid = this.createGameId();
      this.games[gid] = game = new BoloServerWorld(map);
      game.gid = gid;
      game.url = this.options.general.base + "/match/" + gid;
      console.log("Created game '" + gid + "'");
      this.startLoop();
      return game;
    };

    Application.prototype.closeGame = function(game) {
      delete this.games[game.gid];
      this.possiblyStopLoop();
      game.close();
      return console.log("Closed game '" + game.gid + "'");
    };

    Application.prototype.registerIrcClient = function(irc) {
      return this.ircClients.push(irc);
    };

    Application.prototype.listen = function() {
      this.httpServer = this.connectServer.listen.apply(this.connectServer, arguments);
      return this.httpServer.on('upgrade', (function(_this) {
        return function(request, connection, initialData) {
          return _this.handleWebsocket(request, connection, initialData);
        };
      })(this));
    };

    Application.prototype.shutdown = function() {
      var client, game, gid, j, len, ref, ref1;
      ref = this.ircClients;
      for (j = 0, len = ref.length; j < len; j++) {
        client = ref[j];
        client.shutdown();
      }
      ref1 = this.games;
      for (gid in ref1) {
        game = ref1[gid];
        game.close();
      }
      this.loop.stop();
      return this.httpServer.close();
    };

    Application.prototype.startLoop = function() {
      return this.loop.start();
    };

    Application.prototype.possiblyStopLoop = function() {
      if (!this.haveOpenSlots()) {
        return this.loop.stop();
      }
    };

    Application.prototype.tick = function() {
      var game, gid, ref;
      ref = this.games;
      for (gid in ref) {
        game = ref[gid];
        game.tick();
      }
    };

    Application.prototype.getSocketPathHandler = function(path) {
      var m;
      if (path === '/lobby') {
        return false;
      } else if (m = /^\/match\/([a-z]{20})$/.exec(path)) {
        if (this.games.hasOwnProperty(m[1])) {
          return (function(_this) {
            return function(ws) {
              return _this.games[m[1]].onConnect(ws);
            };
          })(this);
        } else {
          return false;
        }
      } else if (path === '/demo' && this.demo) {
        return (function(_this) {
          return function(ws) {
            return _this.demo.onConnect(ws);
          };
        })(this);
      } else {
        return false;
      }
    };

    Application.prototype.handleWebsocket = function(request, connection, initialData) {
      var handler, ws;
      if (request.method !== 'GET') {
        return connection.destroy();
      }
      path = request.url;
      handler = this.getSocketPathHandler(path);
      if (handler === false) {
        return connection.destroy();
      }
      if (WebSocket.isWebSocket(request)) {
        ws = new WebSocket(request, connection, initialData);
        return handler(ws);
      } else {
        return connection.destroy();
      }
    };

    return Application;

  })();

  redirector = function(base) {
    return function(req, res, next) {
      var m, query;
      if (m = /^\/match\/([a-z]{20})$/.exec(req.url)) {
        query = "?" + m[1];
      } else {
        return next();
      }
      res.writeHead(301, {
        'Location': base + "/" + query
      });
      return res.end();
    };
  };

  createBoloApp = function(options) {
    return new Application(options);
  };

  module.exports = createBoloApp;

}).call(this);
