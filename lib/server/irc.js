// Generated by CoffeeScript 1.12.7
(function() {
  var BoloIrc, IRC, createBoloIrcClient, fs;

  fs = require('fs');

  IRC = require('irc-js');

  BoloIrc = (function() {
    function BoloIrc(options) {
      var ref;
      this.didAddressMe = new RegExp("^" + options.nick + "[:, ]+(.+?)\\s*$", 'i');
      this.watchers = [];
      this.client = new IRC(options);
      if ((ref = options.channels) != null ? ref.length : void 0) {
        this.client.addListener('connected', (function(_this) {
          return function() {
            return _this.client.join(options.channels.join(','));
          };
        })(this));
      }
      this.client.addListener('privmsg', (function(_this) {
        return function(m) {
          var completeText, i, len, match, ref1, watcher;
          if ((m.channel = m.params[0]).charAt(0) !== '#') {
            return;
          }
          completeText = m.params[m.params.length - 1];
          if (!(match = _this.didAddressMe.exec(completeText))) {
            return;
          }
          m.text = match[1];
          m.person.ident = m.person.user + "@" + m.person.host;
          m.say = function(text) {
            return _this.client.privmsg(m.channel, m.person.nick + ": " + text, true);
          };
          ref1 = _this.watchers;
          for (i = 0, len = ref1.length; i < len; i++) {
            watcher = ref1[i];
            if (m.match_data = m.text.match(watcher.re)) {
              if (watcher.onlyAdmin && m.person.ident !== options.admin) {
                m.say("I can't let you do that.");
              } else {
                watcher.callback(m);
              }
              break;
            }
          }
        };
      })(this));
      this.client.addListener('disconnected', (function(_this) {
        return function() {
          if (_this.shuttingDown) {
            return;
          }
          return _this.reconnectTimer = setTimeout(function() {
            _this.reconnectTimer = null;
            return _this.client.connect();
          }, 10000);
        };
      })(this));
      this.client.connect();
    }

    BoloIrc.prototype.shutdown = function() {
      this.shuttingDown = true;
      return this.client.quit('Augh, they got me!');
    };

    BoloIrc.prototype.watch_for = function(re, callback) {
      return this.watchers.push({
        re: re,
        callback: callback
      });
    };

    BoloIrc.prototype.watch_for_admin = function(re, callback) {
      return this.watchers.push({
        re: re,
        callback: callback,
        onlyAdmin: true
      });
    };

    return BoloIrc;

  })();

  createBoloIrcClient = function(app, options) {
    var findHisGame, irc;
    irc = new BoloIrc(options);
    findHisGame = function(ident) {
      var game, gid, ref;
      ref = app.games;
      for (gid in ref) {
        game = ref[gid];
        if (game.owner === ident) {
          return game;
        }
      }
    };
    irc.watch_for(/^map\s+(.+?)$/, function(m) {
      var descr, matches, names;
      if (findHisGame(m.person.ident)) {
        return m.say("You already have a game open.");
      }
      if (!app.haveOpenSlots()) {
        return m.say("All game slots are full at the moment.");
      }
      matches = app.maps.fuzzy(m.match_data[1]);
      if (matches.length === 1) {
        descr = matches[0];
        return fs.readFile(descr.path, function(err, data) {
          var game;
          if (err) {
            return m.say("Having some trouble loading that map, sorry.");
          }
          game = app.createGame(data);
          game.owner = m.person.ident;
          return m.say("Started game “" + descr.name + "” at: " + game.url);
        });
      } else if (matches.length === 0) {
        return m.say("I can't find any map like that.");
      } else if (matches.length > 4) {
        return m.say("You need to be a bit more specific than that.");
      } else {
        names = (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = matches.length; i < len; i++) {
            descr = matches[i];
            results.push("“" + descr.name + "”");
          }
          return results;
        })();
        return m.say("Did you mean one of these: " + (names.join(', ')));
      }
    });
    irc.watch_for(/^close$/, function(m) {
      var game;
      if (!(game = findHisGame(m.person.ident))) {
        return m.say("You don't have a game open.");
      }
      app.closeGame(game);
      return m.say("Your game was closed.");
    });
    irc.watch_for_admin(/^reindex$/, function(m) {
      return app.maps.reindex(function() {
        return m.say("Index rebuilt.");
      });
    });
    irc.watch_for_admin(/^reset demo$/, function(m) {
      return app.resetDemo(function(err) {
        return m.say(err != null ? err : 'Demo game reset.');
      });
    });
    irc.watch_for_admin(/^shutdown$/, function(m) {
      return app.shutdown();
    });
    return irc;
  };

  module.exports = createBoloIrcClient;

}).call(this);
